A* algorithm is based off Dijkstra’s algorithm where it uses a priority queue to order the next node to travel to using the shortest distance travelled from initial state to the cell. However, unlike Dijkstra’s algorithm, A* builds in an additional heuristic that considers the distance to the end node so the implemented priority queue is not only based off shortest path, but instead is the sum of the distance of the path and how far they need to travel to the end position i.e. the shortest predicted total path cost:
L ̂(π_T^A )=C_t^* (s_t;π_T^A )+G ̂_t (s_t;π_T^A )
Where L ̂(π_T^A ) is the predicted total cost of the trajectory using policy π^A, C_t^* (s_t;π_T^A ) is the cost to come up to the current point on the path s_t, G ̂_t (s_t;π_T^A ) is the approximated cost to go from current point on path s_t to the end goal.
 An admissible heuristic is one that returns an optimal result. For a heuristic to be admissible it needs to satisfy the following condition:
0≤G ̂_t (s_t;π_T )≤G_t (s_t;π_T )
From the condition above, we can see that the heuristic must be non-negative and needs to be less than or equal to the cost to go for that trajectory. This is important as it ensures the algorithm never overestimates the actual path cost from a node to the goal.
Therefore the Euclidean distance is an admissible heuristic because it is the absolute minimum cost to travel so it is always less than or equal to the actual cost of the path. The squared Euclidean distance however, is not admissible since the squared distance is much greater than the cost to come function which becomes negligible at long distances. As a result, it overestimates the final path cost so the final path it finds may not be the shortest.
